# /common_playbook/roles/php/tasks

# ATTENTION ########################
# 以下の値は、各プロジェクトごとに指定すること
# 
# {{ version.php }}
# {{ php.configure_options }}
# {{ php.file_uploads_disabled }}
# {{ php.mysql_enabled }}
# {{ php.memory_limit }}
# {{ httpd.conf }}
# {{ httpd.compile_from_src }}
#
# {{ httpd.compile_from_src }} が true のときは以下の値も指定すること
# {{ httpd.ctlbin }}
#
# {{ php.mysql_enabled }} が true のときは以下の値も指定すること
# {{ mariadb.sock }}
#
####################################

- name: "add epel repository"
  yum_repository: name=epel description=epel baseurl="{{ epel_repo }}" gpgkey="{{ epel_key }}" gpgcheck={{ gpgcheck }} enabled=no
  when: ansible_architecture is not match("^arm")

- name: "add epel repository"
  yum_repository: name=epel description=epel baseurl="{{ epel_repo_arm }}" gpgcheck=no enabled=no
  when: ansible_architecture is match("^arm")

- name: "install the latest version of re2c, curl-devel"
  yum: name={{ packages }} state=latest enablerepo=epel
  vars:
    packages:
      - re2c
      - curl-devel

- name: "remove PHP packages"
  yum: name={{ packages }} state=absent
  vars:
    packages:
      - php
      - php-*

- name: "delete existing PHP source files"
  file: path=/usr/local/src/php-{{ version.php }} state=absent

- name: "download PHP source files"
  get_url: dest=/tmp force=yes timeout={{ get_url_timeout }} url="{{ php.source_url }}"

- name: "unpack PHP source files"
  unarchive: remote_src=yes src=/tmp/php-{{ version.php }}.tar.gz dest=/usr/local/src

- name: "configure PHP programs"
  command: "chdir=/usr/local/src/php-{{ version.php }} ./configure {{ php.configure_options }}"

- name: "make PHP programs"
  make: chdir=/usr/local/src/php-{{ version.php }}

- name: "install PHP programs"
  make: chdir=/usr/local/src/php-{{ version.php }} target=install

- name: "copy php.ini file"
  copy: remote_src=yes src="/usr/local/src/php-{{ version.php }}/php.ini-production" dest="{{ php.ini }}" mode=0644 

# タイムゾーンと文字コードを指定  
- name: "add a block to {{ php.ini }} if it does not exist"
  blockinfile:
    path: "{{ php.ini }}"
    marker: "; {mark} ANSIBLE MANAGED BLOCK"
    backup: yes
    block: |
       ; メモリリーク回避
       memory_limit = {{ php.memory_limit }}
       date.timezone = Asia/Tokyo
       default_charset = UTF-8
       ; 実行ディレクトリ以外のphpが動かなくなる
       ;open_basedir = 
       extension_dir = /usr/lib64/php/modules

# PHPバージョンを表示しない
- name: "disable expose_php in {{ php.ini }}"
  replace: path="{{ php.ini }}" regexp='^expose_php = .*$' replace="expose_php = Off" backup=yes

# ファイルアップロードを許可しない
- name: "disable file_uploads in {{ php.ini }}"
  replace: path="{{ php.ini }}" regexp='^file_uploads = .*$' replace="file_uploads = Off" backup=yes
  when: php.file_uploads_disabled

# MySQL sock fileを指定
- name: "edit location of mysql sock file in {{ php.ini }}" 
  replace: path="{{ php.ini }}" regexp='mysqli.default_socket =$' replace="mysqli.default_socket = {{ mariadb.sock }}" backup=yes
  when: php.mysql_enabled

- name: "add a block to {{ httpd.conf }} if it does not exist"
  blockinfile:
    path: "{{ httpd.conf }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK (PHP) "
    backup: yes
    block: |
      <FilesMatch "\.php$">
         AddHandler php7-script .php
         AddType application/x-httpd-php .php
      </FilesMatch>

- name: "edit DirectoryIndex of {{ httpd.conf }}"
  replace: path="{{ httpd.conf }}" regexp='DirectoryIndex index.html.*$' replace="DirectoryIndex index.html index.php" backup=yes

- name: "restart service apachectl"
  command: "{{ httpd.ctlbin }} graceful"
  when: httpd.compile_from_src

- name: "restart service httpd"
  service: name=httpd state=restarted
  when: not httpd.compile_from_src

- name: "show version number of PHP"
  command: /usr/local/bin/php -v
  register: php_version
  changed_when: false

- name: "debug version number of PHP"
  debug: var=php_version.stdout_lines
  when: php_version is succeeded

- name: "show all loaded modules of PHP"
  command: /usr/local/bin/php -m
  register: php_module
  changed_when: false

- name: "debug all loaded modules of PHP"
  debug: var=php_module.stdout_lines
  when: php_module is succeeded

